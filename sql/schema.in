/*
** System configuration table
** ex: syntax=sql
*/

CREATE TABLE config
(
	name varchar(64) not null,
	value varchar(255),
	PRIMARY KEY(name)
);


/*
** This table contains information about currently locked tables
** or subsystems
*/

CREATE TABLE locks
(
	component_id integer not null,
	component_name varchar(64),
	lock_status integer not null,
	owner_info varchar(255),  // Information about current lock owner, may be empty
	PRIMARY KEY(component_id)
);


/*
** Users
*/

CREATE TABLE users
(
	id integer not null,
	name varchar(64) not null,
	password varchar(48),
	access integer,
	flags integer,
	full_name varchar(127),
	description varchar(255),
	PRIMARY KEY(id)
);


/*
** User groups
*/

CREATE TABLE user_groups
(
	id integer not null,
	name varchar(64) not null,
	access integer,
	flags integer,
	description varchar(255),
	PRIMARY KEY(id)
);


/*
** Users to groups mapping
*/

CREATE TABLE user_group_members
(
	group_id integer not null,
	user_id integer not null,
	PRIMARY KEY(group_id,user_id)
);


/*
** Nodes to be added
*/

CREATE TABLE new_nodes
(
	id integer not null,
	ip_addr integer not null,
	ip_netmask integer not null,
	discovery_flags integer not null
);


/*
** Nodes information
*/

CREATE TABLE nodes
(
	id integer not null,
	name varchar(64),
	status integer,
	is_deleted integer not null,
	primary_ip integer,
	is_snmp integer,
	is_agent integer,
	is_bridge integer,
	is_router integer,
	is_local_mgmt integer,
	snmp_version integer,
	community varchar(32),
	snmp_oid varchar(255),
	discovery_flags integer,
	auth_method integer,
	secret varchar(64),
	agent_port integer,
	status_poll_type integer,
	inherit_access_rights integer,
	PRIMARY KEY(id)
);


/*
** Subnets
*/

CREATE TABLE subnets
(
	id integer not null,
	name varchar(64),
	status integer,
	is_deleted integer not null,
	ip_addr integer,
	ip_netmask integer,
	PRIMARY KEY(id)
);


/*
** Nodes' interfaces
*/

CREATE TABLE interfaces
(
	id integer not null,
	name varchar(64),
	status integer,
        is_deleted integer,
	node_id integer not null,
	ip_addr integer,
	ip_netmask integer,
	if_type integer,
	if_index integer,
	PRIMARY KEY(id)
);


/*
** Container objects
*/

CREATE TABLE containers
(
	id integer not null,
	name varchar(64),
	status integer,
	is_deleted integer not null,
	category integer,
	description TEXT,
	PRIMARY KEY(id)
);


/*
** Nodes to subnets mapping
*/

CREATE TABLE nsmap
(
	subnet_id integer not null,
	node_id integer not null,
	PRIMARY KEY(subnet_id,node_id)
);


/*
** Container members
*/

CREATE TABLE container_members
(
	container_id integer not null,
	object_id integer not null,
	PRIMARY KEY(container_id,object_id)
);


/*
** Container categories
*/

CREATE TABLE container_categories
(
	category integer not null,
	name varchar(64),
	image_id integer not null,
	description TEXT,
	PRIMARY KEY(category)
);


/*
** Objects' ACLs
*/

CREATE TABLE acl
(
	object_id integer not null,
	user_id integer not null,
	access_rights integer not null,
	PRIMARY KEY(object_id,user_id)
);


/*
** Objects' access options
*/

CREATE TABLE access_options
(
	object_id integer not null,
	inherit_rights integer not null,
	PRIMARY KEY(object_id)
);


/*
** Data collection items
*/

CREATE TABLE items
(
	item_id integer not null,
	node_id integer not null,
	name varchar(255) not null,
	description varchar(255),
	source integer,			// 0 for internal or 1 for native agent or 2 for SNMP
	datatype integer,
	polling_interval integer,
	retention_time integer,
	status integer,			// ACTIVE, DISABLED or NOT_SUPPORTED
	PRIMARY KEY(item_id)
);


/*
** Events configuration
*/

CREATE TABLE events
(
	event_id integer not null,
	name varchar(64) not null,	// Short event name
	severity integer,
	flags integer,
	message varchar(255),		// Message template
	description DT_TEXT,
	PRIMARY KEY(event_id)
);


/*
** Event log
*/

CREATE TABLE event_log
(
	event_id integer,
	timestamp integer,
	source integer,			// Source object ID
	severity integer,
	message varchar(255)
);


/*
** Actions on events
*/

CREATE TABLE actions
(
	action_id integer not null,
	action_type integer,
	email_addr varchar(255),
	email_subject varchar(255),
	// Field "action_data" holds message text for e-mail actions or
	// command line for external command execution actions
	action_data TEXT,
	PRIMARY KEY(action_id)
);


/*
** Event groups
*/

CREATE TABLE event_groups
(
	id integer not null,
	name varchar(64),
	description varchar(255),
	PRIMARY KEY(id)
);


/*
** Event group members
*/

CREATE TABLE event_group_members
(
	group_id integer not null,
	event_id integer not null,
	PRIMARY KEY(group_id,event_id)
);


/*
** Event processing policy
*/

CREATE TABLE event_policy
(
	rule_id integer not null,   // Rule number
	flags integer not null,
	comments varchar(255),
	alarm_message varchar(255),
	alarm_severity integer,
	alarm_key varchar(255),	    // Alarm key (used for auto acknowlegment)
	alarm_ack_key varchar(255), // Acknowlege all alarms with given key
	alarm_ack_flag integer,	    // 1 if alarm will be acknowleged at creation time
	PRIMARY KEY(rule_id)
);

CREATE TABLE policy_source_list
(
	rule_id integer not null,
	object_id integer not null,
	PRIMARY KEY(rule_id,object_id)
);

CREATE TABLE policy_event_list
(
	rule_id integer not null,
	event_id integer not null,
	PRIMARY KEY(rule_id,event_id)
);

CREATE TABLE policy_action_list
(
	rule_id integer not null,
	action_id integer not null,
	PRIMARY KEY(rule_id,action_id)
);


/*
** Deleted objects
*/

CREATE TABLE deleted_objects
(
	object_id integer not null,
	object_class integer,
	name varchar(64),
	ip_addr integer,
	ip_netmask integer,
	PRIMARY KEY(object_id)
);


/*
** Threshold checking rules
*/

CREATE TABLE thresholds
(
	threshold_id integer not null,
	item_id integer not null,
	sequence_number integer not null,
	fire_value varchar(255),
	rearm_value varchar(255),
	check_function integer,
	check_operation integer,
	parameter_1 integer,
	parameter_2 integer,
	event_code integer,
	PRIMARY KEY(threshold_id)
);


/*
** Data collection templates
*/

CREATE TABLE dct
(
	template_id integer not null,
	name varchar(255),
	PRIMARY KEY(template_id)
);


/*
** Items in data collection templates
*/

CREATE TABLE dct_items
(
	template_id integer not null,
	item_id integer not null,
	name varchar(255),
	description varchar(255),
	source integer,			// 0 for internal or 1 for native agent or 2 for SNMP
	datatype integer,
	polling_interval integer,
	retention_time integer,
	PRIMARY KEY(template_id,item_id)
);


/*
** Mapping hosts to templates
*/

CREATE TABLE dct_host_map
(
	template_id integer not null,
	node_id integer not null,
	PRIMARY KEY(template_id,node_id)
);


/*
** Alarms
*/

CREATE TABLE alarms
(
	alarm_id integer not null,	// Unique alarm identifier
	timestamp integer,
	source integer,
	message varchar(255),
	severity integer,
	alarm_key varchar(255),	// Alarm key (used for auto acknowlegment)
	is_ack integer,		// TRUE if alarm is acknowleged
	ack_by integer,         // ID of user who acknowleges alarm
	PRIMARY KEY(alarm_id)
);


/*
** Alarm notes
*/

CREATE TABLE alarm_notes
(
	note_id integer not null,
	alarm_id integer not null,
	timestamp integer,
	note_text DT_TEXT,
	PRIMARY KEY(note_id)
);


/*
** Image catalog
*/

CREATE TABLE images
(
	image_id integer not null,
	name varchar(64),
	file_name varchar(255),
	file_hash varchar(32),
	PRIMARY KEY(image_id)
);

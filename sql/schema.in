/*
** NetXMS Database Schema
**
** ex: syntax=sql
*/


/*
** System configuration table
*/

CREATE TABLE config
(
	var_name varchar(63) not null,
	var_value varchar(255) not null,
#ifdef DB_ORACLE
	is_visible integer default 1 not null,
	need_server_restart integer default 0 not null,
#else
	is_visible integer not null default 1,
	need_server_restart integer not null default 0,
#endif
	PRIMARY KEY(var_name)
) TABLE_TYPE;


/*
** Loadable modules
*/

CREATE TABLE modules
(
	module_id integer not null,
	module_name varchar(63) not null,
	exec_name varchar(255) not null,
#ifdef DB_ORACLE
	module_flags integer default 0 not null,
#else
	module_flags integer not null default 0,
#endif
	description SQL_TEXT not null,
	license_key varchar(255) not null,
	PRIMARY KEY(module_id)
) TABLE_TYPE;


/*
** Users
*/

CREATE TABLE users
(
	id integer not null,
	guid varchar(36) not null,
	name varchar(63) not null,
	password varchar(48) not null,
	system_access integer not null,
	flags integer not null,
	full_name varchar(127) not null,
	description varchar(255) not null,
	grace_logins integer not null,
	auth_method integer not null,
	cert_mapping_method integer not null,
	cert_mapping_data SQL_TEXT not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** User groups
*/

CREATE TABLE user_groups
(
	id integer not null,
	guid varchar(36) not null,
	name varchar(63) not null,
	system_access integer not null,
	flags integer not null,
	description varchar(255) not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Users to groups mapping
*/

CREATE TABLE user_group_members
(
	group_id integer not null,
	user_id integer not null,
	PRIMARY KEY(group_id,user_id)
) TABLE_TYPE;


/*
** User profiles
*/

CREATE TABLE user_profiles
(
	user_id integer not null,
	var_name varchar(255) not null,
	var_value SQL_TEXT not null,
	PRIMARY KEY(user_id,var_name)
) TABLE_TYPE;


/*
** Common object properties
*/

CREATE TABLE object_properties
(
	object_id integer not null,
	name varchar(63) not null,
	status integer not null,
	is_deleted integer not null,
	is_system integer not null,
	image_id integer not null,
	last_modified integer not null,
	inherit_access_rights integer not null,
	status_calc_alg integer not null,
	status_prop_alg integer not null,
	status_fixed_val integer not null,
	status_shift integer not null,
	status_translation varchar(8) not null,
	status_single_threshold integer not null,
	status_thresholds varchar(8) not null,
	comments SQL_TEXT not null,
	PRIMARY KEY(object_id)
) TABLE_TYPE;


/*
** Zone object
*/

CREATE TABLE zones
(
	id integer not null,		// Zone object's ID
	zone_guid integer not null,	// Globally unique ID for zone
	zone_type integer not null,	// Active or passive zone
	controller_ip varchar(15) not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Zone IP address list
*/

CREATE TABLE zone_ip_addr_list
(
	zone_id integer not null,	// Zone object's ID
	ip_addr varchar(15) not null,
	PRIMARY KEY(zone_id,ip_addr)
) TABLE_TYPE;


/*
** Nodes information
*/

CREATE TABLE nodes
(
	id integer not null,
	primary_ip varchar(15) not null,
	node_flags integer not null,
	snmp_version integer not null,
	community varchar(127) not null,
	snmp_oid varchar(255) not null,
	auth_method integer not null,
	secret varchar(64) not null,
	agent_port integer not null,
	status_poll_type integer not null,
	node_type integer not null,
	agent_version varchar(63) not null,
	platform_name varchar(63) not null,
	poller_node_id integer not null,
	zone_guid integer not null,
	proxy_node integer not null,
	snmp_proxy integer not null,
	required_polls integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Clusters information
*/

CREATE TABLE clusters
(
	id integer not null,
	cluster_type integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Cluster members
*/

CREATE TABLE cluster_members
(
	cluster_id integer not null,
	node_id integer not null,
	PRIMARY KEY(cluster_id,node_id)
) TABLE_TYPE;


/*
** Cluster interconnect subnets
*/

CREATE TABLE cluster_sync_subnets
(
	cluster_id integer not null,
	subnet_addr varchar(15) not null,
	subnet_mask varchar(15) not null,
	PRIMARY KEY(cluster_id,subnet_addr)
) TABLE_TYPE;


/*
** Cluster resources
*/

CREATE TABLE cluster_resources
(
	cluster_id integer not null,
	resource_id integer not null,
	resource_name varchar(255) not null,
	ip_addr varchar(15) not null,
	PRIMARY KEY(cluster_id,resource_id)
) TABLE_TYPE;


/*
** Subnets
*/

CREATE TABLE subnets
(
	id integer not null,
	ip_addr varchar(15) not null,
	ip_netmask varchar(15) not null,
	zone_guid integer not null,
	synthetic_mask integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Nodes' interfaces
*/

CREATE TABLE interfaces
(
	id integer not null,
	node_id integer not null,
	ip_addr varchar(15) not null,
	ip_netmask varchar(15) not null,
	if_type integer not null,
	if_index integer not null,
	mac_addr varchar(15) not null,
	synthetic_mask integer not null,
	required_polls integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Network services
*/

CREATE TABLE network_services
(
	id integer not null,
	node_id integer not null,
	service_type integer not null,
	ip_bind_addr varchar(15) not null,
	ip_proto integer not null,
	ip_port integer not null,
	check_request SQL_TEXT not null,
	check_responce SQL_TEXT not null,
	poller_node_id integer not null,
	required_polls integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** VPN connectors
*/

CREATE TABLE vpn_connectors
(
	id integer not null,
	node_id integer not null,
	peer_gateway integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** VPN connector networks
*/

CREATE TABLE vpn_connector_networks
(
	vpn_id integer not null,
	network_type integer not null,	// 0 == local, 1 == remote
	ip_addr varchar(15) not null,
	ip_netmask varchar(15) not null,
	PRIMARY KEY(vpn_id,ip_addr)
) TABLE_TYPE;


/*
** Container objects
*/

CREATE TABLE containers
(
	id integer not null,
	category integer not null,
	object_class integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Condition objects
*/

CREATE TABLE conditions
(
	id integer not null,
	activation_event integer not null,
	deactivation_event integer not null,
	source_object integer not null,
	active_status integer not null,
	inactive_status integer not null,
	script SQL_TEXT not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** DCI to condition mapping
*/

CREATE TABLE cond_dci_map
(
	condition_id integer not null,
	dci_id integer not null,
	node_id integer not null,
	dci_func integer not null,
	num_polls integer not null,
	PRIMARY KEY(condition_id,dci_id)
) TABLE_TYPE;


/*
** Data collection templates
*/

CREATE TABLE templates
(
	id integer not null,
	version integer,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Mapping hosts to templates
*/

CREATE TABLE dct_node_map
(
	template_id integer not null,
	node_id integer not null,
	PRIMARY KEY(template_id,node_id)
) TABLE_TYPE;


/*
** Nodes to subnets mapping
*/

CREATE TABLE nsmap
(
	subnet_id integer not null,
	node_id integer not null,
	PRIMARY KEY(subnet_id,node_id)
) TABLE_TYPE;


/*
** Container members
*/

CREATE TABLE container_members
(
	container_id integer not null,
	object_id integer not null,
	PRIMARY KEY(container_id,object_id)
) TABLE_TYPE;


/*
** Container categories
*/

CREATE TABLE container_categories
(
	category integer not null,
	name varchar(63),
	image_id integer not null,
	description SQL_TEXT,
	PRIMARY KEY(category)
) TABLE_TYPE;


/*
** Objects' ACLs
*/

CREATE TABLE acl
(
	object_id integer not null,
	user_id integer not null,
	access_rights integer not null,
	PRIMARY KEY(object_id,user_id)
) TABLE_TYPE;


/*
** Data collection items
**
** If node_id != 0, it's an item bound to node,	and template_id points to 
** the template used for creating this item. In this case, template_id = 0
** means that item was created manually.
** If node_id = 0, it's a template item, and template_id points to a template
** this item belongs to.
** If both node_id and template_id is 0, it's an error.
*/

CREATE TABLE items
(
	item_id integer not null,
	node_id integer not null,	
	template_id integer not null,
	template_item_id integer not null,
	name varchar(255) not null,
	description varchar(255) not null,
	source integer not null,	// 0 for internal or 1 for native agent or 2 for SNMP
	datatype integer not null,
	polling_interval integer not null,
	retention_time integer not null,
	adv_schedule integer not null,	// 1 if item has advanced schedule
	status integer not null,	// ACTIVE, DISABLED or NOT_SUPPORTED
	delta_calculation integer not null,
	transformation SQL_TEXT not null, // Transformation formula
	instance varchar(255) not null,	  // Free form text which can be used in events
	all_thresholds integer not null,  // 1 if all thresholds should be processed at every check
	resource_id integer not null,  // associated cluster resource ID
	proxy_node integer not null,   // ID of proxy node (for SNMP and agent items)
	PRIMARY KEY(item_id)
) TABLE_TYPE;


/*
** Schedules for DCIs
*/

CREATE TABLE dci_schedules
(
	item_id integer not null,
	schedule varchar(255) not null
) TABLE_TYPE;


/*
** Latest raw values for all data collection items
*/

CREATE TABLE raw_dci_values
(
	item_id integer not null,
	raw_value varchar(255),
	last_poll_time integer,
	PRIMARY KEY(item_id)
) TABLE_TYPE;

#ifndef DB_ORACLE
CREATE INDEX idx_raw_dci_values_item_id ON raw_dci_values(item_id);
#endif


/*
** Events configuration
*/

CREATE TABLE event_cfg
(
	event_code integer not null,
	event_name varchar(63) not null,	// Short event name
	severity integer,
	flags integer,
	message varchar(255),		// Message template
	description SQL_TEXT,
	PRIMARY KEY(event_code)
) TABLE_TYPE;


/*
** Event log
*/

CREATE TABLE event_log
(
	event_id SQL_INT64 not null,
	event_code integer not null,
	event_timestamp integer,
	event_source integer,			// Source object ID
	event_severity integer,
	event_message varchar(255),
	root_event_id SQL_INT64 default 0,	
		/* Non-zero if current event correlates to some other event */
	user_tag varchar(63) not null,
	PRIMARY KEY(event_id)
) TABLE_TYPE;

CREATE INDEX idx_event_log_event_timestamp ON event_log(event_timestamp);


/*
** Actions on events
*/

CREATE TABLE actions
(
	action_id integer not null,
	action_name varchar(63) not null,
	action_type integer not null,
	is_disabled integer,
	// Field "rcpt_addr" holds e-mail address for e-mail actions,
	// phone number for sms actions, and remote host address for
	// remote execution actions
	rcpt_addr varchar(255),
	email_subject varchar(255),
	// Field "action_data" holds message text for e-mail and sms actions,
	// command line for external command execution actions, or
	// action name with optional arguments for remote execution actions
	action_data SQL_TEXT not null,
	PRIMARY KEY(action_id)
) TABLE_TYPE;


/*
** Event groups
*/

CREATE TABLE event_groups
(
	id integer not null,
	name varchar(63) not null,
	description varchar(255) not null,
	range_start integer not null,
	range_end integer not null,
	PRIMARY KEY(id)
) TABLE_TYPE;


/*
** Event group members
*/

CREATE TABLE event_group_members
(
	group_id integer not null,
	event_code integer not null,
	PRIMARY KEY(group_id,event_code)
) TABLE_TYPE;


/*
** Event processing policy
*/

CREATE TABLE event_policy
(
	rule_id integer not null,   // Rule number
	flags integer not null,
	comments SQL_TEXT not null,
	script SQL_TEXT not null,
	alarm_message varchar(255) not null,
	alarm_severity integer not null,
	alarm_key varchar(255) not null,    // Alarm key (used for auto termination)
	alarm_timeout integer not null,	// Timeout before sending event
	alarm_timeout_event integer not null,  // Event to be sent on timeout
	PRIMARY KEY(rule_id)
) TABLE_TYPE;

CREATE TABLE policy_source_list
(
	rule_id integer not null,
	object_id integer not null,
	PRIMARY KEY(rule_id,object_id)
) TABLE_TYPE;

CREATE TABLE policy_event_list
(
	rule_id integer not null,
	event_code integer not null,
	PRIMARY KEY(rule_id,event_code)
) TABLE_TYPE;

CREATE TABLE policy_action_list
(
	rule_id integer not null,
	action_id integer not null,
	PRIMARY KEY(rule_id,action_id)
) TABLE_TYPE;

CREATE TABLE policy_time_range_list
(
	rule_id integer not null,
	time_range_id integer not null,
	PRIMARY KEY(rule_id,time_range_id)
) TABLE_TYPE;


/*
** Time range objects
*/

CREATE TABLE time_ranges
(
	time_range_id integer not null,
	wday_mask integer not null,	// Bits 0 .. 6 for each day of week
	mday_mask integer not null,	// Bits 0 .. 30 for each day of month
	month_mask integer not null,	// Bits 0 .. 11 for each month
	time_range varchar(255) not null, // In format HHMMHHMM[,HHMMHHMM[,...]]
	PRIMARY KEY(time_range_id)
) TABLE_TYPE;


/*
** Deleted objects
*/

CREATE TABLE deleted_objects
(
	object_id integer not null,
	object_class integer not null,
	name varchar(63) not null,
	ip_addr varchar(15) not null,
	ip_netmask varchar(15) not null,
	PRIMARY KEY(object_id)
) TABLE_TYPE;


/*
** Threshold checking rules
*/

CREATE TABLE thresholds
(
	threshold_id integer not null,
	item_id integer not null,
	sequence_number integer not null,
	fire_value varchar(255) not null,
	rearm_value varchar(255) not null,
	check_function integer not null,
	check_operation integer not null,
	parameter_1 integer not null,
	parameter_2 integer not null,
	event_code integer not null,
	rearm_event_code integer not null,
	current_state integer not null,
	repeat_interval integer not null,
	PRIMARY KEY(threshold_id)
) TABLE_TYPE;

CREATE INDEX idx_thresholds_item_id ON thresholds(item_id);
CREATE INDEX idx_thresholds_sequence ON thresholds(sequence_number);


/*
** Alarms
*/

CREATE TABLE alarms
(
	alarm_id integer not null,	// Unique alarm identifier
	alarm_state integer not null,
	hd_state integer not null,	// Help desk system state
	hd_ref varchar(63) not null,	// Help desk reference
	creation_time integer not null,
	last_change_time integer not null,
	source_object_id integer not null,
	source_event_code integer not null,
	source_event_id SQL_INT64 not null,
	message varchar(255) not null,
	original_severity integer not null,
	current_severity integer not null,
	repeat_count integer not null,
	alarm_key varchar(255) not null, // Alarm key (used for auto acknowlegment)
	ack_by integer not null,         // ID of user who was acknowleged alarm
	term_by integer not null,        // ID of user who was terminated alarm
	timeout integer not null,
	timeout_event integer not null,
	PRIMARY KEY(alarm_id)
) TABLE_TYPE;


/*
** Alarm change history
*/

CREATE TABLE alarm_change_log
(
	change_id SQL_INT64 not null,
	change_time integer not null,
	alarm_id integer not null,
	opcode integer not null,	// Operation code
	user_id integer not null,
	info_text SQL_TEXT not null,	// Additional information
	PRIMARY KEY(change_id)
) TABLE_TYPE;

CREATE INDEX idx_alarm_change_log_alarm_id ON alarm_change_log(alarm_id);


/*
** Alarm notes
*/

CREATE TABLE alarm_notes
(
	note_id integer not null,
	alarm_id integer not null,
	change_time integer not null,
	user_id integer not null,	// Last edited by
	note_text SQL_TEXT not null,
	PRIMARY KEY(note_id)
) TABLE_TYPE;

CREATE INDEX idx_alarm_notes_alarm_id ON alarm_notes(alarm_id);


/*
** Alarm groups
*/

CREATE TABLE alarm_grops
(
	alarm_group_id integer not null,
	group_name varchar(255) not null,
	PRIMARY KEY(alarm_group_id)
) TABLE_TYPE;


/*
** Alarms to alarm groups mapping
*/

CREATE TABLE alarm_group_map
(
	alarm_group_id integer not null,
	alarm_id integer not null,
	PRIMARY KEY(alarm_group_id,alarm_id)
) TABLE_TYPE;


/*
** Image catalog
*/

CREATE TABLE images
(
	image_id integer not null,
	name varchar(64),
	file_name_png varchar(255),
	file_hash_png varchar(32),
	file_name_ico varchar(255),
	file_hash_ico varchar(32),
	PRIMARY KEY(image_id)
) TABLE_TYPE;


/*
** Default images for various object classes
*/

CREATE TABLE default_images
(
	object_class integer not null,
	image_id integer not null,
	PRIMARY KEY(object_class)
) TABLE_TYPE;


/*
** OID to node type translation
*/

CREATE TABLE oid_to_type
(
	pair_id integer not null,
	snmp_oid varchar(255) not null,
	node_type integer not null,
	node_flags integer not null,
	PRIMARY KEY(pair_id)
) TABLE_TYPE;


/*
** SNMP trap configuration
*/

CREATE TABLE snmp_trap_cfg
(
	trap_id integer not null,
	snmp_oid varchar(255) not null,
	event_code integer not null,
	user_tag varchar(63) not null,
	description varchar(255),
	PRIMARY KEY(trap_id)
) TABLE_TYPE;


/*
** SNMP trap parameters mapping
*/

CREATE TABLE snmp_trap_pmap
(
	trap_id integer not null,
	parameter integer not null,
	snmp_oid varchar(255),
	description varchar(255),
	PRIMARY KEY(trap_id,parameter)
) TABLE_TYPE;


/*
** Agent packages
*/

CREATE TABLE agent_pkg
(
	pkg_id integer not null,
	pkg_name varchar(63),
	version varchar(31),
	platform varchar(63),
	pkg_file varchar(255),
	description varchar(255),
	PRIMARY KEY(pkg_id)	
) TABLE_TYPE;


/*
** Object tools
*/

CREATE TABLE object_tools
(
	tool_id integer not null,
	tool_name varchar(255) not null,
	tool_type integer not null,
	tool_data SQL_TEXT not null,
	description varchar(255) not null,
	flags integer not null,
	matching_oid varchar(255) not null,
	confirmation_text varchar(255) not null,
	PRIMARY KEY(tool_id)
) TABLE_TYPE;


/*
** Access list for object tools
*/

CREATE TABLE object_tools_acl
(
	tool_id integer not null,
	user_id integer not null,
	PRIMARY KEY(tool_id,user_id)
) TABLE_TYPE;


/*
** Configuration of columns for SNMP_TABLE and AGENT_TABLE type of object tools
*/

CREATE TABLE object_tools_table_columns
(
	tool_id integer not null,
	col_number integer not null,
	col_name varchar(255),
	col_oid varchar(255),
	col_format integer,	// Column format (integer, string, etc.)
	col_substr integer,	// Number of matching substring in regexp
	PRIMARY KEY(tool_id,col_number)
) TABLE_TYPE;


/*
** Stored syslog messages
*/

CREATE TABLE syslog
(
	msg_id SQL_INT64 not null,
	msg_timestamp integer not null,
	facility integer not null,
	severity integer not null,
	source_object_id integer not null,
	hostname varchar(127) not null,
	msg_tag varchar(32) not null,
	msg_text SQL_TEXT not null,
	PRIMARY KEY(msg_id)
) TABLE_TYPE;

CREATE INDEX idx_syslog_msg_timestamp ON syslog(msg_timestamp);


/*
** Script library
*/

CREATE TABLE script_library
(
	script_id integer not null,
	script_name varchar(255) not null,
	script_code SQL_TEXT not null,
	PRIMARY KEY(script_id)
) TABLE_TYPE;


/*
** Extended SNMP trap log
*/

CREATE TABLE snmp_trap_log
(
	trap_id SQL_INT64 not null,
	trap_timestamp integer not null,
	ip_addr varchar(15) not null,
	object_id integer not null,
	trap_oid varchar(255) not null,
	trap_varlist SQL_TEXT not null,
	PRIMARY KEY(trap_id)
) TABLE_TYPE;

CREATE INDEX idx_snmp_trap_log_tt ON snmp_trap_log(trap_timestamp);


/*
** Network maps
*/

CREATE TABLE maps
(
	map_id integer not null,
	map_name varchar(255) not null,
	description SQL_TEXT not null,
	root_object_id integer not null,
	PRIMARY KEY(map_id)
) TABLE_TYPE;


/*
** Map ACLs
*/

CREATE TABLE map_access_lists
(
	map_id integer not null,
	user_id integer not null,
	access_rights integer not null,
	PRIMARY KEY(map_id,user_id)
) TABLE_TYPE;


/*
** Submaps of network maps
*/

CREATE TABLE submaps
(
	map_id integer not null,
	submap_id integer not null,	// Equal to object id
	attributes integer not null,	
	PRIMARY KEY(map_id,submap_id)
) TABLE_TYPE;


/*
** Object positioning on submap
*/

CREATE TABLE submap_object_positions
(
	map_id integer not null,
	submap_id integer not null,
	object_id integer not null,
	x integer not null,
	y integer not null,
	PRIMARY KEY(map_id,submap_id,object_id)
) TABLE_TYPE;


/*
** Object links on submap
*/

CREATE TABLE submap_links
(
	map_id integer not null,
	submap_id integer not null,
	object_id1 integer not null,
	object_id2 integer not null,
	link_type integer not null,
	port1 varchar(255) not null,
	port2 varchar(255) not null,
	PRIMARY KEY(map_id,submap_id,object_id1,object_id2)
) TABLE_TYPE;


/*
** Agent configurations
*/

CREATE TABLE agent_configs
(
	config_id integer not null,
	config_name varchar(255) not null,
	config_file SQL_TEXT not null,
	config_filter SQL_TEXT not null,
	sequence_number integer not null,
	PRIMARY KEY(config_id)
) TABLE_TYPE;


/*
** Address lists
*/

CREATE TABLE address_lists
(
	list_type integer not null, // discovery filter, etc.
	addr_type integer not null, // 0 - addr/mask, 1 - address range
	addr1 varchar(15) not null,
	addr2 varchar(15) not null
) TABLE_TYPE;

CREATE INDEX idx_address_lists_list_type ON address_lists(list_type);


/*
** Graphs
*/

CREATE TABLE graphs
(
	graph_id integer not null,
	owner_id integer not null,
	name varchar(255) not null,
	config SQL_TEXT not null,
	PRIMARY KEY(graph_id)
) TABLE_TYPE;


/*
** Graph access lists
*/

CREATE TABLE graph_acl
(
	graph_id integer not null,
	user_id integer not null,
	user_rights integer not null,
	PRIMARY KEY(graph_id,user_id)
) TABLE_TYPE;


/*
** Certificates
*/

CREATE TABLE certificates
(
	cert_id integer not null,
	cert_type integer not null,
	cert_data SQL_TEXT not null,	// Certificate in PEM format
	subject SQL_TEXT not null,
	comments SQL_TEXT not null,
	PRIMARY KEY(cert_id)
) TABLE_TYPE;


/*
** Log processing policy groups
*/

CREATE TABLE lpp_groups
(
	lpp_group_id integer not null,
	lpp_group_name varchar(63) not null,
	parent_group integer not null,	// 0 for root
	PRIMARY KEY(lpp_group_id)
) TABLE_TYPE;


/*
** Log processing policy
*/

CREATE TABLE lpp
(
	lpp_id integer not null,
	lpp_group_id integer not null,	// 0 for root
	lpp_name varchar(63) not null,
	lpp_version integer not null,
	lpp_flags integer not null,
	PRIMARY KEY(lpp_id)
) TABLE_TYPE;


/*
** Nodes associated with log processing policy
*/

CREATE TABLE lpp_associations
(
	lpp_id integer not null,
	node_id integer not null,
	log_file varchar(255) not null
) TABLE_TYPE;


/*
** Rulesets for log processing policies
*/

CREATE TABLE lpp_rulesets
(
	ruleset_id integer not null,
	ruleset_name varchar(63),
	PRIMARY KEY(ruleset_id)
) TABLE_TYPE;


/*
** Matching rules for log processing policies
*/

CREATE TABLE lpp_rules
(
	lpp_id integer not null,
	rule_number integer not null,
	ruleset_id integer not null,	// 0 - matching rule, >0 - ruleset id
	msg_id_start integer not null,
	msg_id_end integer not null,
	severity integer not null,
	source_name varchar(255) not null,
	msg_text_regexp varchar(255) not null,
	event_code integer not null,
	PRIMARY KEY(lpp_id,rule_number)
) TABLE_TYPE;


/*
** Audit log
*/

CREATE TABLE audit_log
(
	record_id integer not null,
	timestamp integer not null,
	subsystem varchar(32) not null,
	success integer not null,
	user_id integer not null,	// 0x7FFFFFFF for system
	workstation varchar(63) not null,
	object_id integer not null,
	message SQL_TEXT not null,
	PRIMARY KEY(record_id)
) TABLE_TYPE;

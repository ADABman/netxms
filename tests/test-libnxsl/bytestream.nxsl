/* Check byte stream functionality */

bs = new ByteStream();

i8 = 0x11;
i16 = 0x1122;
i32 = 0x11223344;
i64 = 0x1122334455667788;
u16 = uint32(0xF122);
u32 = uint32(0xF1223344);
u64 = uint64(0xF122334455667788);
d = 0.5;

testStrASCII = "My ASCII brings all the boys to the yard and they're like, it's better than yours";
testStr = "1234 you can do it! шиндовс где мои смайлики?!";
testStrByteCount = 67;

// Byte
bs->writeByte(i8);


// Big-endian
bs->writeInt16B(i16); 
bs->writeInt32B(i32); 
bs->writeInt64B(i64); 
bs->writeFloatB(d);

bs->writeInt16B(-i16); 
bs->writeInt32B(-i32); 
bs->writeInt64B(-i64); 
bs->writeFloatB(-d);

bs->writeInt16B(u16); 
bs->writeInt32B(u32); 
bs->writeInt64B(u64);


// Little-endian
bs->writeInt16L(i16); 
bs->writeInt32L(i32); 
bs->writeInt64L(i64); 
bs->writeFloatL(d);

bs->writeInt16L(-i16); 
bs->writeInt32L(-i32); 
bs->writeInt64L(-i64); 
bs->writeFloatL(-d);

bs->writeInt16L(u16); 
bs->writeInt32L(u32); 
bs->writeInt64L(u64);


// Strings
bs->writeString(testStrASCII, "ASCII");
bs->writeCString(testStrASCII, "ASCII");
bs->writePString(testStrASCII, "ASCII");

count_s = bs->writeString(testStr, "UTF-8");
count_cs = bs->writeCString(testStr, "UTF-8");
count_ps = bs->writePString(testStr, "UTF-8");

assert(count_s == testStrByteCount);
assert(count_cs == testStrByteCount + 1);
assert(count_ps == testStrByteCount + 2);


// Extra
bs->writeInt16B(i16);


bs->seek(0);


// Byte
assert(bs->readByte() == i8);


// Big-endian
assert(bs->readInt16B() == i16); 
assert(bs->readInt32B() == i32); 
assert(bs->readInt64B() == i64); 
assert(bs->readFloatB() == d);

assert(bs->readInt16B() == -i16); 
assert(bs->readInt32B() == -i32); 
assert(bs->readInt64B() == -i64); 
assert(bs->readFloatB() == -d);

assert(bs->readUInt16B() == u16); 
assert(bs->readUInt32B() == u32); 
assert(bs->readUInt64B() == u64);


// Little-endian
assert(bs->readInt16L() == i16); 
assert(bs->readInt32L() == i32); 
assert(bs->readInt64L() == i64); 
assert(bs->readFloatL() == d);

assert(bs->readInt16L() == -i16); 
assert(bs->readInt32L() == -i32); 
assert(bs->readInt64L() == -i64); 
assert(bs->readFloatL() == -d);

assert(bs->readUInt16L() == u16); 
assert(bs->readUInt32L() == u32); 
assert(bs->readUInt64L() == u64);


// Strings
assert(bs->readString(81, "ASCII") == testStrASCII);
assert(bs->readCString("ASCII") == testStrASCII);
assert(bs->readPString("ASCII") == testStrASCII);

assert(bs->readString(testStrByteCount, "UTF-8") == testStr);
assert(bs->readCString("UTF-8") == testStr);
assert(bs->readPString("UTF-8") == testStr);


// Extra
assert(bs->readInt16L() == 0x2211); 

controlPos = bs->pos;
bs->seek(-10);
assert(bs->pos == controlPos);
bs->seek(10000, SeekOrigin::Current);
assert(bs->pos == controlPos);
bs->seek(10, SeekOrigin::End);
assert(bs->pos == controlPos);

return 0;
